#### Christian J. Bouwens
#### Miruna Carmen Barbu
#### Chris Odhams
#### BRSC team
#### visualisations
#### last update: 2023.08.08

def simple_count_plt(table, x, ax, colour_pal=None, hue=None, mask=False):
	import seaborn as sns
	threshold = 5
	if hue:
		table_count = (table
			.groupby([hue, x])
			.size()
			.reset_index(drop=False, name='count')
			)
	else:
		table_count = table.value_counts(x).reset_index(drop=False, name='count')
	
	sns.set_theme(style='whitegrid')
	sns.barplot(
		data=table_count,
		x=x,
		y='count',
		palette=colour_pal,
		ax=ax,
		hue=hue
		)

	# adding the numeric values on top of the bars.
	for c in ax.containers:
		if mask:
			labels = [v if v > threshold else "<5" for v in c.datavalues]
		else:
			labels =  [v for v in c.datavalues]
		ax.bar_label(
			c,
			labels=labels,
			padding=-1,
			fontsize=8)

	ax.set_ylabel(None)
	ax.xaxis.set_label_position('top')
	ax.margins(.1,0.25)


def simple_hist_plt(table, x, ax, hue=None, mask=False):
	import seaborn as sns

	threshold = 5
	sns.set_theme(style='whitegrid')
	sns.histplot(
		data=table,
		x=x,
		binwidth=5,
		element="bars",
		ax=ax,
		hue=hue
		)
	for c in ax.containers:
		if mask:
			labels = [v if v > threshold  else "<5" for v in c.datavalues]
		else:
			labels =  [v for v in c.datavalues]
		ax.bar_label(
			c,
			labels=labels,
			padding=-1,
			fontsize=8)

	ax.set_ylabel(None)
	ax.xaxis.set_label_position('top') 
	ax.margins(0,0.25)




# function to create visualisation for A or AB cohorts.
def vis_cohorts(cohorts, coldict=None, names=None, mask=True, show=False):
	"""creates a figure of age, ancestry, mortality and sex in a grid pattern.
	the data in the figure can be masked (no counts <5, or not).

	Args:
		cohorts (list): a list of cohort class objects or a single cohort class
		cntaining all_age, all_ancestry, all_sex and all_mort - generated by
		the Cohort.concat_all() class function. 
		coldict (Dictionary): colour mapping per feature of tables, must include
			'sex_col', 'vital_col', 'ancestry_col' as keys.
		mask (bool, optional): masks counts lower than 5. Defaults to True.
		ploting (bool,optional): prints the plot using plt.show if true, returns
			the fig variable if False. 
	"""
	import seaborn as sns
	import matplotlib.pyplot as plt
	import pandas as pd

	if not coldict:
		coldict = {
		'all_gel':{
			'dark blue':'#2b2f3b',
			'nhs blue':'#005eb8',
			'cyan':'#07c5f5',
			'green':'#26913d',
			'light green':'#71c52d',
			'yellow':'#ffb300',
			'magenta':'#df007d',
			'grey':'#c3c4bf',
			'white': '#FFFFFF'
			},
		'sex_col':{'Male':'#26913D', 'Female':'#2B2F3B'},
		'ancestry_col':{
			'AFR':'#26913D',
			'AMR':'#005eb8',
			'EAS':'#2B2F3B',
			'EUR':'#DF007D',
			'SAS':'#07c5f5',
			'UNA':'#ffb300',
			'UNO':'#c3c4bf',
			},
		'vital_cols':{
			'Alive':'#07c5f5',
			'Deceased':'#c3c4bf'
			}
		}
	sex_cols = coldict['sex_col']
	ancestry_cols = coldict['ancestry_col']
	vital_cols = coldict['vital_cols']

	try:
		iterator = iter(cohorts)
	except:
		mult_cohorts = False
		conc_age = cohorts.all_age
		conc_anc = cohorts.all_ancestry
		conc_sex = cohorts.all_sex
		conc_mort = cohorts.all_mort
		names = cohorts.name
	else:
		# could optimize memory by using iterator instead of cohorts.
		mult_cohorts=True

		if not names:
			names = [df.name for df in cohorts]
		conc_age = pd.concat([df.all_age for df in cohorts], keys=names).reset_index()
		conc_anc = pd.concat([df.all_ancestry for df in cohorts], keys=names).reset_index()
		conc_sex = pd.concat([df.all_sex for df in cohorts], keys=names).reset_index()
		conc_mort = pd.concat([df.all_mort for df in cohorts], keys=names).reset_index()
	

	plt.close()
	plt.clf()
	fig = plt.figure()
	gs = fig.add_gridspec(ncols=3,nrows=2)
	axs1 = fig.add_subplot(gs[0,:-1])
	axs2 = fig.add_subplot(gs[0,2])
	axs3 = fig.add_subplot(gs[1,:-1])
	axs4 = fig.add_subplot(gs[1,2])
	
	### sex ###
	if mult_cohorts:
		simple_count_plt(
			table=conc_sex,
			hue='sex',
			ax=axs2,
			colour_pal=sex_cols,
			x='level_0',
			mask=mask
			)
		sns.move_legend(
			axs2, "upper left",
			bbox_to_anchor=(1, 1), 
			ncol=1,  
			frameon=False,
			# columnspacing=0.8,
			handletextpad=0.2,
	    )
	else:
		simple_count_plt(
			table=conc_sex,
			x='sex',
			ax=axs2,
			colour_pal=sex_cols,
			hue=None,
			mask=mask
			)

	axs2.set_ylabel(None)
	axs2.set_xlabel('Sex')

	

	### ancestry ###
	if mult_cohorts:
		simple_count_plt(
			table=conc_anc,
			hue='predicted_ancestry',
			ax=axs3,
			colour_pal=ancestry_cols,
			x='level_0',
			mask=mask
			)
		sns.move_legend(
			axs3, "lower center",
			bbox_to_anchor=(.5, -0.25), 
			ncol=7, 
			frameon=False,
			columnspacing=0.1,
			handletextpad=0.2,
			title=None
	    )
	else:
		simple_count_plt(
			table=conc_anc,
			x='predicted_ancestry',
			ax=axs3,
			colour_pal=ancestry_cols,
			hue=None,
			mask=mask
			)
	axs3.set_ylabel(None)
	axs3.set_xlabel('Predicted Ancestry')



	### mortality ###
	if mult_cohorts:
		simple_count_plt(
			table=conc_mort,
			hue='status',
			ax=axs4,
			colour_pal=vital_cols,
			x='level_0',
			mask=mask
			)
		sns.move_legend(
			axs4, "upper left",
			bbox_to_anchor=(1, 1), 
			ncol=1,  
			frameon=False,
			# columnspacing=0.8,
			handletextpad=0.2,
			title=None
	    )
	else:
		simple_count_plt(
			table=conc_mort,
			x='status',
			ax=axs4,
			colour_pal=vital_cols,
			hue=None,
			mask=mask
			)
	axs4.set_ylabel(None)
	axs4.set_xlabel('Vital status')

	### age ###
	if mult_cohorts:
		simple_hist_plt(
			table=conc_age,
			x='age_at_consent',
			ax=axs1,
			hue='level_0',
			mask=mask
			)
		sns.move_legend(
			axs1,
			"upper right",
			frameon=False,
			title=None,
			handletextpad=0.2,
		)
	else:
		simple_hist_plt(
			table=conc_age,
			x='age_at_consent',
			ax=axs1,
			hue=None,
			mask=mask
			)
	axs1.set_ylabel(None)
	axs1.set_xlabel('Age')
	

	if show:
		plt.show()
	elif not show:
		return fig

